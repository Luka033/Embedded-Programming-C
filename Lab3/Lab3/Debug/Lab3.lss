
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000184  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000800  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000719  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000341  00000000  00000000  000011d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cb  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000115  00000000  00000000  00001963  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  8e:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init>:

// function to receive data
unsigned char uart_recieve(void) {
	while (!( UCSR0A & (1 << RXC0)));					// wait while data is being received
	return UDR0;										// return 8-bit data
}
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 61       	ori	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <uart_transmit>:

// function to send data 
void uart_transmit(unsigned char data) { 
	while (!( UCSR0A & (1<<UDRE0)));					// wait while register is free 
  b6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ba:	95 ff       	sbrs	r25, 5
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <uart_transmit>
	UDR0 = data;										// load data in the register 
  be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c2:	08 95       	ret

000000c4 <scan_keypad>:
}

void scan_keypad() {
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	for(uint8_t i = 0; i < ROWS; i++) {
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	3c c0       	rjmp	.+120    	; 0x14c <scan_keypad+0x88>
		PORTD &= ~(1 << (i + ROWS));					// set i:th row to low (offset by 4 since we start at pin 4)
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	ed 2e       	mov	r14, r29
  d8:	f1 2c       	mov	r15, r1
  da:	97 01       	movw	r18, r14
  dc:	2c 5f       	subi	r18, 0xFC	; 252
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	01 e0       	ldi	r16, 0x01	; 1
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <scan_keypad+0x26>
  e6:	00 0f       	add	r16, r16
  e8:	11 1f       	adc	r17, r17
  ea:	2a 95       	dec	r18
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <scan_keypad+0x22>
  ee:	90 2f       	mov	r25, r16
  f0:	90 95       	com	r25
  f2:	89 23       	and	r24, r25
  f4:	8b b9       	out	0x0b, r24	; 11
		for(uint8_t j = 0; j < COLS; j++) {
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	23 c0       	rjmp	.+70     	; 0x140 <scan_keypad+0x7c>
			if(!(PINB & (1 << j))) {					// check which columns is pulled low
  fa:	83 b1       	in	r24, 0x03	; 3
  fc:	2c 2f       	mov	r18, r28
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0c 2e       	mov	r0, r28
 104:	02 c0       	rjmp	.+4      	; 0x10a <scan_keypad+0x46>
 106:	95 95       	asr	r25
 108:	87 95       	ror	r24
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <scan_keypad+0x42>
 10e:	80 fd       	sbrc	r24, 0
 110:	16 c0       	rjmp	.+44     	; 0x13e <scan_keypad+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	4f ef       	ldi	r20, 0xFF	; 255
 114:	84 e3       	ldi	r24, 0x34	; 52
 116:	9c e0       	ldi	r25, 0x0C	; 12
 118:	41 50       	subi	r20, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <scan_keypad+0x54>
 120:	00 c0       	rjmp	.+0      	; 0x122 <scan_keypad+0x5e>
 122:	00 00       	nop
				_delay_ms(DELAY);						// de-bounce
				uart_transmit(buttons[i][j]);
 124:	c7 01       	movw	r24, r14
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	80 50       	subi	r24, 0x00	; 0
 130:	9f 4f       	sbci	r25, 0xFF	; 255
 132:	fc 01       	movw	r30, r24
 134:	e2 0f       	add	r30, r18
 136:	f3 1f       	adc	r31, r19
 138:	80 81       	ld	r24, Z
 13a:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_transmit>
}

void scan_keypad() {
	for(uint8_t i = 0; i < ROWS; i++) {
		PORTD &= ~(1 << (i + ROWS));					// set i:th row to low (offset by 4 since we start at pin 4)
		for(uint8_t j = 0; j < COLS; j++) {
 13e:	cf 5f       	subi	r28, 0xFF	; 255
 140:	c4 30       	cpi	r28, 0x04	; 4
 142:	d8 f2       	brcs	.-74     	; 0xfa <scan_keypad+0x36>
			if(!(PINB & (1 << j))) {					// check which columns is pulled low
				_delay_ms(DELAY);						// de-bounce
				uart_transmit(buttons[i][j]);
			}
		}
		PORTD |= (1 << (i + ROWS));						// set the i:th row back to high (offset by 4 since we start at pin 4)
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	08 2b       	or	r16, r24
 148:	0b b9       	out	0x0b, r16	; 11
	while (!( UCSR0A & (1<<UDRE0)));					// wait while register is free 
	UDR0 = data;										// load data in the register 
}

void scan_keypad() {
	for(uint8_t i = 0; i < ROWS; i++) {
 14a:	df 5f       	subi	r29, 0xFF	; 255
 14c:	d4 30       	cpi	r29, 0x04	; 4
 14e:	10 f2       	brcs	.-124    	; 0xd4 <scan_keypad+0x10>
				uart_transmit(buttons[i][j]);
			}
		}
		PORTD |= (1 << (i + ROWS));						// set the i:th row back to high (offset by 4 since we start at pin 4)
	}
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	ff 90       	pop	r15
 15a:	ef 90       	pop	r14
 15c:	08 95       	ret

0000015e <main>:


int main(void)
{
    uart_init();
 15e:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init>
	DDRD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7);				// set rows as output
 162:	8a b1       	in	r24, 0x0a	; 10
 164:	80 6f       	ori	r24, 0xF0	; 240
 166:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1 << DDB0) & ~(1 << DDB1) & ~(1 << DDB2) & ~(1 << DDB3);			// set columns as input
 168:	84 b1       	in	r24, 0x04	; 4
 16a:	80 7f       	andi	r24, 0xF0	; 240
 16c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3);		// enable internal pull up resistors for columns
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	8f 60       	ori	r24, 0x0F	; 15
 172:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);								// set all rows output as high
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	80 6f       	ori	r24, 0xF0	; 240
 178:	8b b9       	out	0x0b, r24	; 11
		
    while (1) 
    {
		scan_keypad();
 17a:	0e 94 62 00 	call	0xc4	; 0xc4 <scan_keypad>
 17e:	fd cf       	rjmp	.-6      	; 0x17a <main+0x1c>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
