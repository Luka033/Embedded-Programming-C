
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d7  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034b  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  0000152b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:
#include <avr/io.h>
#define F_CPu 16000000UL	


void init() {
	TCCR0A |= (1 << WGM01);							// set timer to CTC mode
  80:	84 b5       	in	r24, 0x24	; 36
  82:	82 60       	ori	r24, 0x02	; 2
  84:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);			// set pre-scaler to 1024
  86:	85 b5       	in	r24, 0x25	; 37
  88:	85 60       	ori	r24, 0x05	; 5
  8a:	85 bd       	out	0x25, r24	; 37
	DDRB &= ~(1 << DDB7);							// set button as input (0)
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << DDB5);							// set LED as output (1)
  92:	84 b1       	in	r24, 0x04	; 4
  94:	80 62       	ori	r24, 0x20	; 32
  96:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << DDB7);							// enable pull-up resistor for button
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	85 b9       	out	0x05, r24	; 5
	OCR0A = 0x9B;									// top value (100%)
  9e:	8b e9       	ldi	r24, 0x9B	; 155
  a0:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0x00;									// duty cycle (0%)
  a2:	18 bc       	out	0x28, r1	; 40
  a4:	08 95       	ret

000000a6 <ledOn>:
}

void ledOn() {
	PORTB |= (1 << 5);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	08 95       	ret

000000ae <ledOff>:
}

void ledOff() {
	PORTB &= ~(1 << 5);
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	8f 7d       	andi	r24, 0xDF	; 223
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	08 95       	ret

000000b6 <main>:
}

int main(void)
{
	init();
  b6:	0e 94 40 00 	call	0x80	; 0x80 <init>
    while (1) 
    {
		if(!(PINB & (1 << 7)) && (OCR0B < OCR0A)) { // check button pressed
  ba:	1f 99       	sbic	0x03, 7	; 3
  bc:	08 c0       	rjmp	.+16     	; 0xce <main+0x18>
  be:	98 b5       	in	r25, 0x28	; 40
  c0:	87 b5       	in	r24, 0x27	; 39
  c2:	98 17       	cp	r25, r24
  c4:	20 f4       	brcc	.+8      	; 0xce <main+0x18>
			OCR0B++;								// increment duty cycle
  c6:	88 b5       	in	r24, 0x28	; 40
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	88 bd       	out	0x28, r24	; 40
  cc:	08 c0       	rjmp	.+16     	; 0xde <main+0x28>
		}
		else if (PINB & (1 << 7) && (OCR0B > 0)) {	// check button released
  ce:	1f 9b       	sbis	0x03, 7	; 3
  d0:	06 c0       	rjmp	.+12     	; 0xde <main+0x28>
  d2:	88 b5       	in	r24, 0x28	; 40
  d4:	88 23       	and	r24, r24
  d6:	19 f0       	breq	.+6      	; 0xde <main+0x28>
			OCR0B--;								// decrement duty cycle
  d8:	88 b5       	in	r24, 0x28	; 40
  da:	81 50       	subi	r24, 0x01	; 1
  dc:	88 bd       	out	0x28, r24	; 40
		}
		
		ledOn();									// turn LED on
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <ledOn>
		while(!(TIFR0 & (1 << OCF0B)));				// wait for the overflow event
  e2:	aa 9b       	sbis	0x15, 2	; 21
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <main+0x2c>
		TIFR0 |= (1 << OCF0B);						// reset the overflow flag
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	85 bb       	out	0x15, r24	; 21
		
		ledOff();									// turn LED off 
  ec:	0e 94 57 00 	call	0xae	; 0xae <ledOff>
		while(!(TIFR0 & (1 << OCF0A)));				// wait for the overflow event
  f0:	a9 9b       	sbis	0x15, 1	; 21
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <main+0x3a>
		TIFR0 |= (1 << OCF0A);						// reset the overflow flag
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	85 bb       	out	0x15, r24	; 21
    }	
  fa:	df cf       	rjmp	.-66     	; 0xba <main+0x4>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
