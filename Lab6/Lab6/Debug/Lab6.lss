
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000004be  00000532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d1  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ce  00000000  00000000  00000ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000333  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000264  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001f13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_7>
  20:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_8>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_14>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  8e:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init>:
	{4, 5, 6, -1},
	{7, 8, 9, -1},
	{-1, 0, -1, -1}};

void init(void) {
	DDRD |= (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7);				// set rows as output
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	80 6f       	ori	r24, 0xF0	; 240
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1 << DDB0) & ~(1 << DDB1) & ~(1 << DDB2) & ~(1 << DDB3);			// set columns as input
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3);		// enable internal pull up resistors for columns
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	8f 60       	ori	r24, 0x0F	; 15
  a6:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << 4 | 1 << 5 | 1 << 6 | 1 << 7);								// set all rows output as high
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	80 6f       	ori	r24, 0xF0	; 240
  ac:	8b b9       	out	0x0b, r24	; 11
	DDRB |= (1 << DDB5);	
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	08 95       	ret

000000b6 <scan_keypad>:
}


void scan_keypad() {	
  b6:	8f 92       	push	r8
  b8:	9f 92       	push	r9
  ba:	af 92       	push	r10
  bc:	bf 92       	push	r11
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	for(uint8_t i = 0; i < ROWS; i++) {
  cc:	d0 e0       	ldi	r29, 0x00	; 0
  ce:	51 c0       	rjmp	.+162    	; 0x172 <scan_keypad+0xbc>
		PORTD &= ~(1 << (i + ROWS));											// set i:th row to low (offset by 4 since we start at pin 4)
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	ed 2e       	mov	r14, r29
  d4:	f1 2c       	mov	r15, r1
  d6:	97 01       	movw	r18, r14
  d8:	2c 5f       	subi	r18, 0xFC	; 252
  da:	3f 4f       	sbci	r19, 0xFF	; 255
  dc:	01 e0       	ldi	r16, 0x01	; 1
  de:	10 e0       	ldi	r17, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <scan_keypad+0x30>
  e2:	00 0f       	add	r16, r16
  e4:	11 1f       	adc	r17, r17
  e6:	2a 95       	dec	r18
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <scan_keypad+0x2c>
  ea:	90 2f       	mov	r25, r16
  ec:	90 95       	com	r25
  ee:	89 23       	and	r24, r25
  f0:	8b b9       	out	0x0b, r24	; 11
		for(uint8_t j = 0; j < COLS; j++) {
  f2:	c0 e0       	ldi	r28, 0x00	; 0
  f4:	38 c0       	rjmp	.+112    	; 0x166 <scan_keypad+0xb0>
			if(!(PINB & (1 << j))) {											// check which columns is pulled low
  f6:	83 b1       	in	r24, 0x03	; 3
  f8:	2c 2f       	mov	r18, r28
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0c 2e       	mov	r0, r28
 100:	02 c0       	rjmp	.+4      	; 0x106 <scan_keypad+0x50>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <scan_keypad+0x4c>
 10a:	80 fd       	sbrc	r24, 0
 10c:	2b c0       	rjmp	.+86     	; 0x164 <scan_keypad+0xae>
				int8_t keyPressed = buttons[i][j];
 10e:	c7 01       	movw	r24, r14
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	80 50       	subi	r24, 0x00	; 0
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	fc 01       	movw	r30, r24
 11e:	e2 0f       	add	r30, r18
 120:	f3 1f       	adc	r31, r19
 122:	d0 80       	ld	r13, Z
				if(keyPressed >= 0) {
 124:	dd 20       	and	r13, r13
 126:	f4 f0       	brlt	.+60     	; 0x164 <scan_keypad+0xae>
					OCR2B = OCR2A * PERCENTAGE * keyPressed;					// set duty cycle
 128:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__floatsisf>
 136:	2d ec       	ldi	r18, 0xCD	; 205
 138:	3c ec       	ldi	r19, 0xCC	; 204
 13a:	4c ec       	ldi	r20, 0xCC	; 204
 13c:	5d e3       	ldi	r21, 0x3D	; 61
 13e:	0e 94 c8 01 	call	0x390	; 0x390 <__mulsf3>
 142:	4b 01       	movw	r8, r22
 144:	5c 01       	movw	r10, r24
 146:	6d 2d       	mov	r22, r13
 148:	dd 0c       	add	r13, r13
 14a:	77 0b       	sbc	r23, r23
 14c:	88 0b       	sbc	r24, r24
 14e:	99 0b       	sbc	r25, r25
 150:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__floatsisf>
 154:	a5 01       	movw	r20, r10
 156:	94 01       	movw	r18, r8
 158:	0e 94 c8 01 	call	0x390	; 0x390 <__mulsf3>
 15c:	0e 94 33 01 	call	0x266	; 0x266 <__fixunssfsi>
 160:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>


void scan_keypad() {	
	for(uint8_t i = 0; i < ROWS; i++) {
		PORTD &= ~(1 << (i + ROWS));											// set i:th row to low (offset by 4 since we start at pin 4)
		for(uint8_t j = 0; j < COLS; j++) {
 164:	cf 5f       	subi	r28, 0xFF	; 255
 166:	c4 30       	cpi	r28, 0x04	; 4
 168:	30 f2       	brcs	.-116    	; 0xf6 <scan_keypad+0x40>
				if(keyPressed >= 0) {
					OCR2B = OCR2A * PERCENTAGE * keyPressed;					// set duty cycle
				}
			}
		}
		PORTD |= (1 << (i + ROWS));												// set the i:th row back to high (offset by 4 since we start at pin 4)
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	08 2b       	or	r16, r24
 16e:	0b b9       	out	0x0b, r16	; 11
	DDRB |= (1 << DDB5);	
}


void scan_keypad() {	
	for(uint8_t i = 0; i < ROWS; i++) {
 170:	df 5f       	subi	r29, 0xFF	; 255
 172:	d4 30       	cpi	r29, 0x04	; 4
 174:	08 f4       	brcc	.+2      	; 0x178 <scan_keypad+0xc2>
 176:	ac cf       	rjmp	.-168    	; 0xd0 <scan_keypad+0x1a>
				}
			}
		}
		PORTD |= (1 << (i + ROWS));												// set the i:th row back to high (offset by 4 since we start at pin 4)
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	df 90       	pop	r13
 186:	bf 90       	pop	r11
 188:	af 90       	pop	r10
 18a:	9f 90       	pop	r9
 18c:	8f 90       	pop	r8
 18e:	08 95       	ret

00000190 <timer0_init>:

void timer0_init() {
	TCCR0A |= (1 << WGM01);														// set timer 0 to CTC mode
 190:	84 b5       	in	r24, 0x24	; 36
 192:	82 60       	ori	r24, 0x02	; 2
 194:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);										// set pre-scaler to 1024
 196:	85 b5       	in	r24, 0x25	; 37
 198:	85 60       	ori	r24, 0x05	; 5
 19a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);													// overflow interrupt
 19c:	ee e6       	ldi	r30, 0x6E	; 110
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	80 83       	st	Z, r24
	OCR0A = 0x9F;																// set top value for timer 0
 1a6:	8f e9       	ldi	r24, 0x9F	; 159
 1a8:	87 bd       	out	0x27, r24	; 39
 1aa:	08 95       	ret

000001ac <timer2_init>:
}

void timer2_init() {
	TCCR2A |= (1 << WGM21);														// set timer 2 to CTC mode
 1ac:	e0 eb       	ldi	r30, 0xB0	; 176
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A) | (1 << OCIE2B);									// enable interrupts for A and B
 1b6:	e0 e7       	ldi	r30, 0x70	; 112
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	86 60       	ori	r24, 0x06	; 6
 1be:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS21) | (1 << CS22);										// set pre-scaler to 256
 1c0:	e1 eb       	ldi	r30, 0xB1	; 177
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	86 60       	ori	r24, 0x06	; 6
 1c8:	80 83       	st	Z, r24
	OCR2A = 0x4D;																// set top value for timer 2
 1ca:	8d e4       	ldi	r24, 0x4D	; 77
 1cc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1d0:	08 95       	ret

000001d2 <__vector_7>:
}

ISR(TIMER2_COMPA_vect) {
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	8f 93       	push	r24
	LEDON;
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	85 b9       	out	0x05, r24	; 5
}
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_8>:

ISR(TIMER2_COMPB_vect) {
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
	LEDOFF;
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	8f 7d       	andi	r24, 0xDF	; 223
 200:	85 b9       	out	0x05, r24	; 5
}
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_14>:

ISR(TIMER0_COMPA_vect) {
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	scan_keypad();
 230:	0e 94 5b 00 	call	0xb6	; 0xb6 <scan_keypad>
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <main>:


int main(void)
{
	init();
 256:	0e 94 4b 00 	call	0x96	; 0x96 <init>
	timer0_init();
 25a:	0e 94 c8 00 	call	0x190	; 0x190 <timer0_init>
	timer2_init();
 25e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <timer2_init>
	sei();
 262:	78 94       	sei
 264:	ff cf       	rjmp	.-2      	; 0x264 <main+0xe>

00000266 <__fixunssfsi>:
 266:	0e 94 a7 01 	call	0x34e	; 0x34e <__fp_splitA>
 26a:	88 f0       	brcs	.+34     	; 0x28e <__fixunssfsi+0x28>
 26c:	9f 57       	subi	r25, 0x7F	; 127
 26e:	98 f0       	brcs	.+38     	; 0x296 <__fixunssfsi+0x30>
 270:	b9 2f       	mov	r27, r25
 272:	99 27       	eor	r25, r25
 274:	b7 51       	subi	r27, 0x17	; 23
 276:	b0 f0       	brcs	.+44     	; 0x2a4 <__fixunssfsi+0x3e>
 278:	e1 f0       	breq	.+56     	; 0x2b2 <__fixunssfsi+0x4c>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	88 1f       	adc	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	1a f0       	brmi	.+6      	; 0x28a <__fixunssfsi+0x24>
 284:	ba 95       	dec	r27
 286:	c9 f7       	brne	.-14     	; 0x27a <__fixunssfsi+0x14>
 288:	14 c0       	rjmp	.+40     	; 0x2b2 <__fixunssfsi+0x4c>
 28a:	b1 30       	cpi	r27, 0x01	; 1
 28c:	91 f0       	breq	.+36     	; 0x2b2 <__fixunssfsi+0x4c>
 28e:	0e 94 c1 01 	call	0x382	; 0x382 <__fp_zero>
 292:	b1 e0       	ldi	r27, 0x01	; 1
 294:	08 95       	ret
 296:	0c 94 c1 01 	jmp	0x382	; 0x382 <__fp_zero>
 29a:	67 2f       	mov	r22, r23
 29c:	78 2f       	mov	r23, r24
 29e:	88 27       	eor	r24, r24
 2a0:	b8 5f       	subi	r27, 0xF8	; 248
 2a2:	39 f0       	breq	.+14     	; 0x2b2 <__fixunssfsi+0x4c>
 2a4:	b9 3f       	cpi	r27, 0xF9	; 249
 2a6:	cc f3       	brlt	.-14     	; 0x29a <__fixunssfsi+0x34>
 2a8:	86 95       	lsr	r24
 2aa:	77 95       	ror	r23
 2ac:	67 95       	ror	r22
 2ae:	b3 95       	inc	r27
 2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__fixunssfsi+0x42>
 2b2:	3e f4       	brtc	.+14     	; 0x2c2 <__fixunssfsi+0x5c>
 2b4:	90 95       	com	r25
 2b6:	80 95       	com	r24
 2b8:	70 95       	com	r23
 2ba:	61 95       	neg	r22
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	8f 4f       	sbci	r24, 0xFF	; 255
 2c0:	9f 4f       	sbci	r25, 0xFF	; 255
 2c2:	08 95       	ret

000002c4 <__floatunsisf>:
 2c4:	e8 94       	clt
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <__floatsisf+0x12>

000002c8 <__floatsisf>:
 2c8:	97 fb       	bst	r25, 7
 2ca:	3e f4       	brtc	.+14     	; 0x2da <__floatsisf+0x12>
 2cc:	90 95       	com	r25
 2ce:	80 95       	com	r24
 2d0:	70 95       	com	r23
 2d2:	61 95       	neg	r22
 2d4:	7f 4f       	sbci	r23, 0xFF	; 255
 2d6:	8f 4f       	sbci	r24, 0xFF	; 255
 2d8:	9f 4f       	sbci	r25, 0xFF	; 255
 2da:	99 23       	and	r25, r25
 2dc:	a9 f0       	breq	.+42     	; 0x308 <__floatsisf+0x40>
 2de:	f9 2f       	mov	r31, r25
 2e0:	96 e9       	ldi	r25, 0x96	; 150
 2e2:	bb 27       	eor	r27, r27
 2e4:	93 95       	inc	r25
 2e6:	f6 95       	lsr	r31
 2e8:	87 95       	ror	r24
 2ea:	77 95       	ror	r23
 2ec:	67 95       	ror	r22
 2ee:	b7 95       	ror	r27
 2f0:	f1 11       	cpse	r31, r1
 2f2:	f8 cf       	rjmp	.-16     	; 0x2e4 <__floatsisf+0x1c>
 2f4:	fa f4       	brpl	.+62     	; 0x334 <__floatsisf+0x6c>
 2f6:	bb 0f       	add	r27, r27
 2f8:	11 f4       	brne	.+4      	; 0x2fe <__floatsisf+0x36>
 2fa:	60 ff       	sbrs	r22, 0
 2fc:	1b c0       	rjmp	.+54     	; 0x334 <__floatsisf+0x6c>
 2fe:	6f 5f       	subi	r22, 0xFF	; 255
 300:	7f 4f       	sbci	r23, 0xFF	; 255
 302:	8f 4f       	sbci	r24, 0xFF	; 255
 304:	9f 4f       	sbci	r25, 0xFF	; 255
 306:	16 c0       	rjmp	.+44     	; 0x334 <__floatsisf+0x6c>
 308:	88 23       	and	r24, r24
 30a:	11 f0       	breq	.+4      	; 0x310 <__floatsisf+0x48>
 30c:	96 e9       	ldi	r25, 0x96	; 150
 30e:	11 c0       	rjmp	.+34     	; 0x332 <__floatsisf+0x6a>
 310:	77 23       	and	r23, r23
 312:	21 f0       	breq	.+8      	; 0x31c <__floatsisf+0x54>
 314:	9e e8       	ldi	r25, 0x8E	; 142
 316:	87 2f       	mov	r24, r23
 318:	76 2f       	mov	r23, r22
 31a:	05 c0       	rjmp	.+10     	; 0x326 <__floatsisf+0x5e>
 31c:	66 23       	and	r22, r22
 31e:	71 f0       	breq	.+28     	; 0x33c <__floatsisf+0x74>
 320:	96 e8       	ldi	r25, 0x86	; 134
 322:	86 2f       	mov	r24, r22
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	2a f0       	brmi	.+10     	; 0x334 <__floatsisf+0x6c>
 32a:	9a 95       	dec	r25
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	88 1f       	adc	r24, r24
 332:	da f7       	brpl	.-10     	; 0x32a <__floatsisf+0x62>
 334:	88 0f       	add	r24, r24
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	97 f9       	bld	r25, 7
 33c:	08 95       	ret

0000033e <__fp_split3>:
 33e:	57 fd       	sbrc	r21, 7
 340:	90 58       	subi	r25, 0x80	; 128
 342:	44 0f       	add	r20, r20
 344:	55 1f       	adc	r21, r21
 346:	59 f0       	breq	.+22     	; 0x35e <__fp_splitA+0x10>
 348:	5f 3f       	cpi	r21, 0xFF	; 255
 34a:	71 f0       	breq	.+28     	; 0x368 <__fp_splitA+0x1a>
 34c:	47 95       	ror	r20

0000034e <__fp_splitA>:
 34e:	88 0f       	add	r24, r24
 350:	97 fb       	bst	r25, 7
 352:	99 1f       	adc	r25, r25
 354:	61 f0       	breq	.+24     	; 0x36e <__fp_splitA+0x20>
 356:	9f 3f       	cpi	r25, 0xFF	; 255
 358:	79 f0       	breq	.+30     	; 0x378 <__fp_splitA+0x2a>
 35a:	87 95       	ror	r24
 35c:	08 95       	ret
 35e:	12 16       	cp	r1, r18
 360:	13 06       	cpc	r1, r19
 362:	14 06       	cpc	r1, r20
 364:	55 1f       	adc	r21, r21
 366:	f2 cf       	rjmp	.-28     	; 0x34c <__fp_split3+0xe>
 368:	46 95       	lsr	r20
 36a:	f1 df       	rcall	.-30     	; 0x34e <__fp_splitA>
 36c:	08 c0       	rjmp	.+16     	; 0x37e <__fp_splitA+0x30>
 36e:	16 16       	cp	r1, r22
 370:	17 06       	cpc	r1, r23
 372:	18 06       	cpc	r1, r24
 374:	99 1f       	adc	r25, r25
 376:	f1 cf       	rjmp	.-30     	; 0x35a <__fp_splitA+0xc>
 378:	86 95       	lsr	r24
 37a:	71 05       	cpc	r23, r1
 37c:	61 05       	cpc	r22, r1
 37e:	08 94       	sec
 380:	08 95       	ret

00000382 <__fp_zero>:
 382:	e8 94       	clt

00000384 <__fp_szero>:
 384:	bb 27       	eor	r27, r27
 386:	66 27       	eor	r22, r22
 388:	77 27       	eor	r23, r23
 38a:	cb 01       	movw	r24, r22
 38c:	97 f9       	bld	r25, 7
 38e:	08 95       	ret

00000390 <__mulsf3>:
 390:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__mulsf3x>
 394:	0c 94 4c 02 	jmp	0x498	; 0x498 <__fp_round>
 398:	0e 94 3e 02 	call	0x47c	; 0x47c <__fp_pscA>
 39c:	38 f0       	brcs	.+14     	; 0x3ac <__mulsf3+0x1c>
 39e:	0e 94 45 02 	call	0x48a	; 0x48a <__fp_pscB>
 3a2:	20 f0       	brcs	.+8      	; 0x3ac <__mulsf3+0x1c>
 3a4:	95 23       	and	r25, r21
 3a6:	11 f0       	breq	.+4      	; 0x3ac <__mulsf3+0x1c>
 3a8:	0c 94 35 02 	jmp	0x46a	; 0x46a <__fp_inf>
 3ac:	0c 94 3b 02 	jmp	0x476	; 0x476 <__fp_nan>
 3b0:	11 24       	eor	r1, r1
 3b2:	0c 94 c2 01 	jmp	0x384	; 0x384 <__fp_szero>

000003b6 <__mulsf3x>:
 3b6:	0e 94 9f 01 	call	0x33e	; 0x33e <__fp_split3>
 3ba:	70 f3       	brcs	.-36     	; 0x398 <__mulsf3+0x8>

000003bc <__mulsf3_pse>:
 3bc:	95 9f       	mul	r25, r21
 3be:	c1 f3       	breq	.-16     	; 0x3b0 <__mulsf3+0x20>
 3c0:	95 0f       	add	r25, r21
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	55 1f       	adc	r21, r21
 3c6:	62 9f       	mul	r22, r18
 3c8:	f0 01       	movw	r30, r0
 3ca:	72 9f       	mul	r23, r18
 3cc:	bb 27       	eor	r27, r27
 3ce:	f0 0d       	add	r31, r0
 3d0:	b1 1d       	adc	r27, r1
 3d2:	63 9f       	mul	r22, r19
 3d4:	aa 27       	eor	r26, r26
 3d6:	f0 0d       	add	r31, r0
 3d8:	b1 1d       	adc	r27, r1
 3da:	aa 1f       	adc	r26, r26
 3dc:	64 9f       	mul	r22, r20
 3de:	66 27       	eor	r22, r22
 3e0:	b0 0d       	add	r27, r0
 3e2:	a1 1d       	adc	r26, r1
 3e4:	66 1f       	adc	r22, r22
 3e6:	82 9f       	mul	r24, r18
 3e8:	22 27       	eor	r18, r18
 3ea:	b0 0d       	add	r27, r0
 3ec:	a1 1d       	adc	r26, r1
 3ee:	62 1f       	adc	r22, r18
 3f0:	73 9f       	mul	r23, r19
 3f2:	b0 0d       	add	r27, r0
 3f4:	a1 1d       	adc	r26, r1
 3f6:	62 1f       	adc	r22, r18
 3f8:	83 9f       	mul	r24, r19
 3fa:	a0 0d       	add	r26, r0
 3fc:	61 1d       	adc	r22, r1
 3fe:	22 1f       	adc	r18, r18
 400:	74 9f       	mul	r23, r20
 402:	33 27       	eor	r19, r19
 404:	a0 0d       	add	r26, r0
 406:	61 1d       	adc	r22, r1
 408:	23 1f       	adc	r18, r19
 40a:	84 9f       	mul	r24, r20
 40c:	60 0d       	add	r22, r0
 40e:	21 1d       	adc	r18, r1
 410:	82 2f       	mov	r24, r18
 412:	76 2f       	mov	r23, r22
 414:	6a 2f       	mov	r22, r26
 416:	11 24       	eor	r1, r1
 418:	9f 57       	subi	r25, 0x7F	; 127
 41a:	50 40       	sbci	r21, 0x00	; 0
 41c:	9a f0       	brmi	.+38     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 41e:	f1 f0       	breq	.+60     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 420:	88 23       	and	r24, r24
 422:	4a f0       	brmi	.+18     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 424:	ee 0f       	add	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	bb 1f       	adc	r27, r27
 42a:	66 1f       	adc	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	88 1f       	adc	r24, r24
 430:	91 50       	subi	r25, 0x01	; 1
 432:	50 40       	sbci	r21, 0x00	; 0
 434:	a9 f7       	brne	.-22     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 436:	9e 3f       	cpi	r25, 0xFE	; 254
 438:	51 05       	cpc	r21, r1
 43a:	80 f0       	brcs	.+32     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 43c:	0c 94 35 02 	jmp	0x46a	; 0x46a <__fp_inf>
 440:	0c 94 c2 01 	jmp	0x384	; 0x384 <__fp_szero>
 444:	5f 3f       	cpi	r21, 0xFF	; 255
 446:	e4 f3       	brlt	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	98 3e       	cpi	r25, 0xE8	; 232
 44a:	d4 f3       	brlt	.-12     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 44c:	86 95       	lsr	r24
 44e:	77 95       	ror	r23
 450:	67 95       	ror	r22
 452:	b7 95       	ror	r27
 454:	f7 95       	ror	r31
 456:	e7 95       	ror	r30
 458:	9f 5f       	subi	r25, 0xFF	; 255
 45a:	c1 f7       	brne	.-16     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 45c:	fe 2b       	or	r31, r30
 45e:	88 0f       	add	r24, r24
 460:	91 1d       	adc	r25, r1
 462:	96 95       	lsr	r25
 464:	87 95       	ror	r24
 466:	97 f9       	bld	r25, 7
 468:	08 95       	ret

0000046a <__fp_inf>:
 46a:	97 f9       	bld	r25, 7
 46c:	9f 67       	ori	r25, 0x7F	; 127
 46e:	80 e8       	ldi	r24, 0x80	; 128
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	08 95       	ret

00000476 <__fp_nan>:
 476:	9f ef       	ldi	r25, 0xFF	; 255
 478:	80 ec       	ldi	r24, 0xC0	; 192
 47a:	08 95       	ret

0000047c <__fp_pscA>:
 47c:	00 24       	eor	r0, r0
 47e:	0a 94       	dec	r0
 480:	16 16       	cp	r1, r22
 482:	17 06       	cpc	r1, r23
 484:	18 06       	cpc	r1, r24
 486:	09 06       	cpc	r0, r25
 488:	08 95       	ret

0000048a <__fp_pscB>:
 48a:	00 24       	eor	r0, r0
 48c:	0a 94       	dec	r0
 48e:	12 16       	cp	r1, r18
 490:	13 06       	cpc	r1, r19
 492:	14 06       	cpc	r1, r20
 494:	05 06       	cpc	r0, r21
 496:	08 95       	ret

00000498 <__fp_round>:
 498:	09 2e       	mov	r0, r25
 49a:	03 94       	inc	r0
 49c:	00 0c       	add	r0, r0
 49e:	11 f4       	brne	.+4      	; 0x4a4 <__fp_round+0xc>
 4a0:	88 23       	and	r24, r24
 4a2:	52 f0       	brmi	.+20     	; 0x4b8 <__fp_round+0x20>
 4a4:	bb 0f       	add	r27, r27
 4a6:	40 f4       	brcc	.+16     	; 0x4b8 <__fp_round+0x20>
 4a8:	bf 2b       	or	r27, r31
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <__fp_round+0x18>
 4ac:	60 ff       	sbrs	r22, 0
 4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <__fp_round+0x20>
 4b0:	6f 5f       	subi	r22, 0xFF	; 255
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	8f 4f       	sbci	r24, 0xFF	; 255
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	08 95       	ret

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
